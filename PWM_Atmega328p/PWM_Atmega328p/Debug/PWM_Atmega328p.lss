
PWM_Atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003af  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		DDRD = 0xFF;
  80:	6f ef       	ldi	r22, 0xFF	; 255
		
		TCCR0A = 0b01100011;
  82:	53 e6       	ldi	r21, 0x63	; 99
		TCCR0B = 0b00001001;
  84:	49 e0       	ldi	r20, 0x09	; 9
		OCR0A = 100;
  86:	34 e6       	ldi	r19, 0x64	; 100
		OCR0B = 30;
  88:	2e e1       	ldi	r18, 0x1E	; 30
		sei();
		
		for (OCR0B = 50; OCR0B<=100; OCR0B++)
  8a:	92 e3       	ldi	r25, 0x32	; 50
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		DDRD = 0xFF;
  8c:	6a b9       	out	0x0a, r22	; 10
		
		TCCR0A = 0b01100011;
  8e:	54 bd       	out	0x24, r21	; 36
		TCCR0B = 0b00001001;
  90:	45 bd       	out	0x25, r20	; 37
		OCR0A = 100;
  92:	37 bd       	out	0x27, r19	; 39
		OCR0B = 30;
  94:	28 bd       	out	0x28, r18	; 40
		sei();
  96:	78 94       	sei
		
		for (OCR0B = 50; OCR0B<=100; OCR0B++)
  98:	98 bd       	out	0x28, r25	; 40
  9a:	88 b5       	in	r24, 0x28	; 40
  9c:	85 36       	cpi	r24, 0x65	; 101
  9e:	b0 f7       	brcc	.-20     	; 0x8c <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	7f ef       	ldi	r23, 0xFF	; 255
  a2:	81 ee       	ldi	r24, 0xE1	; 225
  a4:	e4 e0       	ldi	r30, 0x04	; 4
  a6:	71 50       	subi	r23, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e0 40       	sbci	r30, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
  b2:	88 b5       	in	r24, 0x28	; 40
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	88 bd       	out	0x28, r24	; 40
  b8:	88 b5       	in	r24, 0x28	; 40
  ba:	85 36       	cpi	r24, 0x65	; 101
  bc:	88 f3       	brcs	.-30     	; 0xa0 <main+0x20>
  be:	e6 cf       	rjmp	.-52     	; 0x8c <main+0xc>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
